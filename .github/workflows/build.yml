name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.25'
  PROJECT_NAME: magnetico

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test ./...

      - name: Run linter
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest

  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        include:
          - platform: darwin-amd64
            os: macos-latest
            goos: darwin
            goarch: amd64
          - platform: darwin-arm64
            os: macos-latest
            goos: darwin
            goarch: arm64
          - platform: linux-amd64
            os: ubuntu-latest
            goos: linux
            goarch: amd64
          - platform: windows-amd64
            os: windows-latest
            goos: windows
            goarch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
          BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
          LDFLAGS="-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -s -w"
          
          mkdir -p releases/${{ matrix.platform }}
          
          if [ "${{ matrix.goos }}" = "windows" ]; then
            go build -ldflags "$LDFLAGS" -o releases/${{ matrix.platform }}/${{ env.PROJECT_NAME }}.exe .
          else
            go build -ldflags "$LDFLAGS" -o releases/${{ matrix.platform }}/${{ env.PROJECT_NAME }} .
          fi

      - name: Copy installation scripts
        run: |
          case "${{ matrix.platform }}" in
            darwin-amd64)
              if [ -f "install/universal/releases/darwin-amd64/install.sh" ]; then
                cp install/universal/releases/darwin-amd64/install.sh releases/darwin-amd64/
                chmod +x releases/darwin-amd64/install.sh
              fi
              ;;
            darwin-arm64)
              if [ -f "install/universal/releases/darwin-amd64/install.sh" ]; then
                cp install/universal/releases/darwin-amd64/install.sh releases/darwin-arm64/install.sh
                chmod +x releases/darwin-arm64/install.sh
                sed -i 's/darwin-amd64/darwin-arm64/g' releases/darwin-arm64/install.sh
              fi
              ;;
            linux-amd64)
              if [ -f "install/universal/releases/linux-amd64/install.sh" ]; then
                cp install/universal/releases/linux-amd64/install.sh releases/linux-amd64/
                chmod +x releases/linux-amd64/install.sh
              fi
              ;;
            windows-amd64)
              if [ -f "install/universal/releases/windows-amd64/install.bat" ]; then
                cp install/universal/releases/windows-amd64/install.bat releases/windows-amd64/
              fi
              ;;
          esac

      - name: Create archive
        run: |
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
          ARCHIVE_NAME="${{ env.PROJECT_NAME }}-${VERSION}-${{ matrix.platform }}"
          
          if [ "${{ matrix.goos }}" = "windows" ]; then
            cd releases && zip -r "${ARCHIVE_NAME}.zip" ${{ matrix.platform }}
          else
            cd releases && tar -czf "${ARCHIVE_NAME}.tar.gz" ${{ matrix.platform }}
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: releases/${{ matrix.platform }}/

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-archive
          path: releases/${{ env.PROJECT_NAME }}-*-${{ matrix.platform }}.*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy archives
          find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
            cp "$file" release-assets/
          done
          
          # Create checksums
          cd release-assets
          for file in *; do
            sha256sum "$file" > "${file}.sha256"
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
